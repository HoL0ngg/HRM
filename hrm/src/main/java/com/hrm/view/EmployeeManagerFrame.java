/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.hrm.view;

import com.hrm.dao.DepartmentDAO;
import com.hrm.dao.EmployeeDAO;
import com.hrm.dao.SalaryChangeHistoryDAO;
import com.hrm.dao.SalaryDAO;
import com.hrm.model.Department;
import com.hrm.model.Employee;
import com.hrm.model.Salary;
import com.hrm.model.SalaryChangeHistory;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.io.File;
import java.util.ArrayList;
import javax.swing.ButtonGroup;
import javax.swing.JFrame;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ...
 */
public class EmployeeManagerFrame extends javax.swing.JFrame {

    private JPopupMenu filterMenu;
    
    // Biến lưu giá trị lọc
    private String selectedDepartment = null; // Phòng ban
    private String selectedStatus = null;     // Trạng thái (On/Off)
    private String selectedWorkType = null;   // Hình thức làm việc (Part-time/Full-time)
    
    public EmployeeManagerFrame() {
        initComponents();
//        loadListSalariesToTable();
        
        loadListEmployeesToTable();

//        loadDataToYeuCauTangLuongDaXemTable();
        setLocationRelativeTo(null);
        setVisible(true);

        Image FilterIcon = new ImageIcon(
                new File("../hrm/src/main/resources/img/filter.png").getAbsolutePath())
                .getImage()
                .getScaledInstance(20, 20, Image.SCALE_SMOOTH);

        this.lableFilter.setIcon(new ImageIcon(FilterIcon));
        
        // gán sự kiện
        addEvents();
    }
    
    private void addEvents() {
        txtSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearch.setText(""); // Xóa nội dung hiện tại khi nhấn vào ô tìm kiếm
            }
        });

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyPressed(java.awt.event.KeyEvent evt) {
                if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                    String searchValue = txtSearch.getText().trim();
                    handleSearch(searchValue);
                }
            }
        });
        
        tbltDanhSachNhanVien.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int selectedRow = tbltDanhSachNhanVien.getSelectedRow(); // Lấy dòng được chọn
                if (selectedRow != -1) {
                    showEmployeeDetailsDialog(selectedRow);
                }
            }
        });
        
        btnAddEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                new EmployeeDetailCreateFrame().setVisible(true);
                dispose();
            }
        });
    }

    private final String[] menu = new String[] { "Mã nhân viên", "Họ và tên", "Trạng thái làm việc", "Email", "Vị trí",
            "Phòng ban" };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        txtSearch = new javax.swing.JTextField();
        lableFilter = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbltDanhSachNhanVien = new javax.swing.JTable();
        btlRemoveFilter = new javax.swing.JButton();
        btnAddEmployee = new javax.swing.JButton();
        pnMenu = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chương trình quản lý nhân viên");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        txtSearch.setText("Tìm kiếm");

        lableFilter.setText("Lọc");
        lableFilter.setPreferredSize(new java.awt.Dimension(20, 20));
        lableFilter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lableFilterMouseClicked(evt);
            }
        });

        tbltDanhSachNhanVien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbltDanhSachNhanVien);

        btlRemoveFilter.setText("Bỏ lọc");
        btlRemoveFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btlRemoveFilterActionPerformed(evt);
            }
        });

        btnAddEmployee.setText("Thêm mới nhân viên");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(btnAddEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btlRemoveFilter)
                .addGap(46, 46, 46)
                .addComponent(lableFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 867, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAddEmployee)
                            .addComponent(lableFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btlRemoveFilter)
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 586, Short.MAX_VALUE))
        );

        pnMenu.setBackground(new java.awt.Color(245, 143, 82));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel1.setText("Quản lý nhân viên");

        javax.swing.GroupLayout pnMenuLayout = new javax.swing.GroupLayout(pnMenu);
        pnMenu.setLayout(pnMenuLayout);
        pnMenuLayout.setHorizontalGroup(
            pnMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMenuLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addContainerGap(711, Short.MAX_VALUE))
        );
        pnMenuLayout.setVerticalGroup(
            pnMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMenuLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(651, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGap(0, 51, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btlRemoveFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btlRemoveFilterActionPerformed
        // Xóa tất cả các giá trị lọc
        selectedDepartment = null;
        selectedStatus = null;
        selectedWorkType = null;

        // Cập nhật lại ComboBox phân trang và JTable
        loadListEmployeesToTable();
    }//GEN-LAST:event_btlRemoveFilterActionPerformed

    private void lableFilterMouseClicked(java.awt.event.MouseEvent evt) {
        if (filterMenu == null) {
            initializeFilterMenu();
        }
        // Hiển thị menu ngay dưới nút bộ lọc
        filterMenu.show(lableFilter, 0, lableFilter.getHeight());
        System.out.println("Filter menu displayed");
    }

    private void initializeFilterMenu() {
        filterMenu = new JPopupMenu();

        // Tạo các radio button
        JRadioButtonMenuItem rbPhongBan = new JRadioButtonMenuItem("Phòng ban");
        JRadioButtonMenuItem rbTrangThaiLamViec = new JRadioButtonMenuItem("Trạng thái làm việc");
        JRadioButtonMenuItem rbHinhThucLamViec = new JRadioButtonMenuItem("Hình thức làm việc");

        // Thêm radio button vào menu
        filterMenu.add(rbPhongBan);
        filterMenu.add(rbTrangThaiLamViec);
        filterMenu.add(rbHinhThucLamViec);

        // Đảm bảo chỉ chọn được một radio button tại một thời điểm
        ButtonGroup group = new ButtonGroup();
        group.add(rbPhongBan);
        group.add(rbTrangThaiLamViec);
        group.add(rbHinhThucLamViec);

        // Gán sự kiện cho từng radio button
        rbPhongBan.addActionListener(e -> showDialogWithDepartments("Chọn Phòng Ban"));
        rbTrangThaiLamViec.addActionListener(e -> showDialog("Chọn Trạng Thái Làm Việc", new String[] { "On", "Off" }));
        rbHinhThucLamViec.addActionListener(e -> showDialog("Chọn Hình Thức Làm Việc", new String[] { "Part-time", "Full-time" }));
    }

    // Hàm để hiển thị dialog cho phòng ban (dữ liệu từ database)
    private void showDialogWithDepartments(String title) {
        // Lấy danh sách phòng ban từ cơ sở dữ liệu
        ArrayList<Department> departmentList = DepartmentDAO.getInstance().selectAll();

        // Chuyển danh sách phòng ban thành mảng String để đổ vào JComboBox
        String[] options = departmentList.stream()
                                         .map(Department::getName) // Lấy tên phòng ban
                                         .toArray(String[]::new);

        // Gọi hàm showDialog để hiển thị dialog
        showDialog(title, options);
    }

    // Hiển thị dialog và xử lý kết quả lọc
    private void showDialog(String title, String[] options) {
        JDialog dialog = new JDialog(this, title, true);
        dialog.setSize(300, 150);
        dialog.setLocationRelativeTo(null);

        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());

        JComboBox<String> comboBox = new JComboBox<>(options);
        JButton btnOK = new JButton("Xác nhận");

        btnOK.addActionListener(e -> {
            String selectedValue = (String) comboBox.getSelectedItem();
            switch (title) {
                case "Chọn Phòng Ban":
                    selectedDepartment = selectedValue;
                    break;
                case "Chọn Trạng Thái Làm Việc":
                    selectedStatus = selectedValue.equals("On") ? "on" : "off";
                    break;
                case "Chọn Hình Thức Làm Việc":
                    selectedWorkType = selectedValue.equals("Part-time") ? "part_time" : "full_time";
                    break;
            }
            dialog.dispose();
            loadListEmployeesToTable();
        });

        panel.add(comboBox, BorderLayout.CENTER);
        panel.add(btnOK, BorderLayout.SOUTH);

        dialog.add(panel);
        dialog.setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeManagerFrame.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        }
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeeManagerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btlRemoveFilter;
    private javax.swing.JButton btnAddEmployee;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lableFilter;
    private javax.swing.JPanel pnMenu;
    private javax.swing.JTable tbltDanhSachNhanVien;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

//    private void loadListSalariesToTable() {
//        SalaryDAO salaryDAO = SalaryDAO.getInstance();
//        ArrayList<Salary> salaryList = salaryDAO.selectAll();
//        System.out.println("check: " + salaryList);
//        Object[][] tableData = new Object[salaryList.size()][6];
//
//        DefaultTableModel model = new DefaultTableModel(tableData, menu);
//        this.tbltDanhSachNhanVien.setModel(model);
//
//        int pageCount = (int) salaryList.size() / 14;
//        int balance = (int) salaryList.size() % 14;
//        if (balance > 0) {
//            pageCount++;
//        }
//        for (int i = 1; i <= pageCount; i++) {
//            cbbPhanTrang.addItem("  " + i + "  ");
//        }
//    }

    private void loadDataToYeuCauTangLuongDaXemTable() {
        SalaryChangeHistoryDAO salaryChangeHistoryDAO = SalaryChangeHistoryDAO.getInstance();
        ArrayList<SalaryChangeHistory> salaryChangeList = salaryChangeHistoryDAO.selectReviewed();
        Object[][] tableData = new Object[salaryChangeList.size()][8];

        for (int i = 0; i < salaryChangeList.size(); ++i) {
            SalaryChangeHistory history = (SalaryChangeHistory) salaryChangeList.get(i);
            Object[] var10000 = tableData[i];
            Object[] var10003 = new Object[] { history.getEmployee().getId() };
            var10000[0] = "NV" + String.format("%03d", var10003);
            tableData[i][1] = history.getEmployee().getName();
            tableData[i][2] = history.getOldSalary();
            tableData[i][3] = history.getNewSalary();
            tableData[i][4] = history.getReasons();
            tableData[i][5] = history.getchangeDateBrowse();
            tableData[i][6] = history.getApprovedBy().getName();
            tableData[i][7] = history.getComments();
        }

        DefaultTableModel model = new DefaultTableModel(tableData, new String[] { "Mã nhân viên", "Họ và tên",
                "Lương hiện tại", "Lương đề xuất", "Lý do yêu cầu", "Ngày thay đổi", "Người duyệt", "Phản hồi" });
        // this.tblYeuCauTangLuongDaXem.setModel(model);
    }
    
    private void loadListEmployeesToTable() {
        // Lấy danh sách nhân viên
        ArrayList<Employee> allEmployees = applyFilters();

        // Tạo dữ liệu cho bảng
        Object[][] tableData = new Object[allEmployees.size()][6];
        for (int i = 0; i < allEmployees.size(); i++) {
            Employee employee = allEmployees.get(i);
            tableData[i][0] = employee.getId();
            tableData[i][1] = employee.getName();
            tableData[i][2] = employee.getStatus().name().equalsIgnoreCase("on") ? "On" : "Off";
            tableData[i][3] = employee.getEmail();
            tableData[i][4] = employee.getPosition().getName();
            tableData[i][5] = employee.getDepartment().getName();
        }

        // Đổ dữ liệu vào bảng
        DefaultTableModel model = new DefaultTableModel(tableData, menu);
        tbltDanhSachNhanVien.setModel(model);
        
        // Bỏ chọn tất cả các dòng
        tbltDanhSachNhanVien.clearSelection();
    }
    // Hiển thị dữ liệu của một trang
    private void displayPage(ArrayList<Employee> employees, int page, int pageSize) {
        int start = (page - 1) * pageSize;
        int end = Math.min(start + pageSize, employees.size());

        Object[][] tableData = new Object[end - start][6];
        for (int i = start, row = 0; i < end; i++, row++) {
            Employee employee = employees.get(i);
            tableData[row][0] = employee.getId();
            tableData[row][1] = employee.getName();
            tableData[row][2] = employee.getStatus().name().equalsIgnoreCase("on") ? "On" : "Off";
            tableData[row][3] = employee.getEmail();
            tableData[row][4] = employee.getPosition().getName();
            tableData[row][5] = employee.getDepartment().getName();
        }

        DefaultTableModel model = new DefaultTableModel(tableData, menu);
        tbltDanhSachNhanVien.setModel(model);
    }
    
    
    // Áp dụng bộ lọc trên danh sách nhân viên
    private ArrayList<Employee> applyFilters() {
        ArrayList<Employee> allEmployees = EmployeeDAO.getInstance().selectAll();
        ArrayList<Employee> filteredEmployees = new ArrayList<>();

        for (Employee employee : allEmployees) {
            boolean matchesDepartment = (selectedDepartment == null || 
                                         selectedDepartment.equals(employee.getDepartment().getName()));
            boolean matchesStatus = (selectedStatus == null || 
                                     selectedStatus.equalsIgnoreCase(employee.getStatus().name()));
            boolean matchesWorkType = (selectedWorkType == null || 
                           (employee.getWork_type() != null && 
                            selectedWorkType.equalsIgnoreCase(employee.getWork_type().name())));

            if (matchesDepartment && matchesStatus && matchesWorkType) {
                filteredEmployees.add(employee);
            }
        }

        return filteredEmployees;
    }
    
    private void handleSearch(String searchValue) {
        if (searchValue.isEmpty()) {
            System.out.println("Giá trị tìm kiếm trống.");
            return;
        }

        // Phân biệt tìm kiếm theo ID (int) hoặc tên (String)
        Object searchParam;
        try {
            searchParam = Integer.parseInt(searchValue); // Nếu là số, tìm kiếm theo ID
        } catch (NumberFormatException e) {
            searchParam = searchValue; // Nếu không phải số, tìm kiếm theo tên
        }

        // Gọi hàm DAO để tìm kiếm
        EmployeeDAO employeeDAO = EmployeeDAO.getInstance();
        ArrayList<Employee> searchResult = employeeDAO.searchByIdOrName(searchParam);

        if (searchResult.isEmpty()) {
            System.out.println("Không tìm thấy kết quả phù hợp.");
        } else {
            System.out.println("Tìm thấy " + searchResult.size() + " kết quả.");
        }

        // Hiển thị kết quả trong bảng
        displayPage(searchResult, 1, 14); // Hiển thị 14 kết quả trên mỗi trang
    }
    
    private void showEmployeeDetailsDialog(int selectedRow) {
        // Lấy thông tin từ JTable
        Object employeeIdObj = tbltDanhSachNhanVien.getValueAt(selectedRow, 0);
        String employeeId = String.valueOf(employeeIdObj);

        String employeeName = (String) tbltDanhSachNhanVien.getValueAt(selectedRow, 1);
        String email = (String) tbltDanhSachNhanVien.getValueAt(selectedRow, 3);

        // Tạo JDialog
        JDialog dialog = new JDialog(this, "Thông tin nhân viên", true);
        dialog.setSize(300, 200);
        dialog.setLocationRelativeTo(this);

        // Panel chính để chứa các thông tin
        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout(10, 10));

        // Nội dung hiển thị
        JLabel lblInfo = new JLabel("<html>"
                + "<b>ID:</b> " + employeeId + "<br>"
                + "<b>Tên:</b> " + employeeName + "<br>"
                + "<b>Email:</b> " + email + "<br>"
                + "</html>", JLabel.CENTER);

        // Nút chức năng
        JButton btnDelete = new JButton("Xóa");
        btnDelete.setBackground(Color.RED);
        btnDelete.setForeground(Color.WHITE);
        btnDelete.addActionListener(e -> {
            showDeleteConfirmationDialog(Integer.parseInt(employeeId), employeeName); 
            dialog.dispose();
            System.out.println("Đã xóa nhân viên: " + employeeId);
        });

        JButton btnDetails = new JButton("Xem thông tin chi tiết");
        btnDetails.setBackground(Color.GREEN);
        btnDetails.setForeground(Color.WHITE);
        btnDetails.addActionListener(e -> {
             // Lấy thông tin Employee từ danh sách hoặc DAO
            EmployeeDAO employeeDAO = EmployeeDAO.getInstance();
            Employee employee = employeeDAO.selectByID(Integer.parseInt(employeeId));
            
            System.out.println("check department: " + employee.getDepartment().getId());
            System.out.println("check positon: " + employee.getPosition());
            
            if (employee != null) {
                // Mở màn hình chi tiết
                new EmployeeDetailFrame(employee).setVisible(true);
                this.dispose();
            } else {
                System.out.println("Không tìm thấy thông tin nhân viên với ID: " + employeeId);
            }

            dialog.dispose(); // Đóng dialog hiển thị nút
        });

        // Panel chứa các nút
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(btnDelete);
        buttonPanel.add(btnDetails);

        // Thêm các thành phần vào dialog
        panel.add(lblInfo, BorderLayout.CENTER);
        panel.add(buttonPanel, BorderLayout.SOUTH);

        dialog.add(panel);
        dialog.setVisible(true);
    }

    private void showDeleteConfirmationDialog(int employeeId, String employeeName) {
        // Tạo JDialog
        JDialog dialog = new JDialog(this, "Xác nhận xóa", true);
        dialog.setSize(300, 150);
        dialog.setLocationRelativeTo(null);

        // Tạo nội dung trong dialog
        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());

        JLabel label = new JLabel("Bạn có chắc chắn xóa?", JLabel.CENTER);
        panel.add(label, BorderLayout.CENTER);

        JPanel buttonPanel = new JPanel();
        JButton btnYes = new JButton("Có");
        JButton btnNo = new JButton("Không");

        buttonPanel.add(btnYes);
        buttonPanel.add(btnNo);

        panel.add(buttonPanel, BorderLayout.SOUTH);
        dialog.add(panel);

        // Sự kiện nút "Có"
        btnYes.addActionListener(e -> {
            // Gọi DAO để xóa nhân viên
            boolean isDeleted = EmployeeDAO.getInstance().xoa(new Employee(employeeId, employeeName));
            if (isDeleted) {
                System.out.println("Đã xóa nhân viên: " + employeeId);
                // Tải lại danh sách nhân viên sau khi xóa
                loadListEmployeesToTable();
            } else {
                System.out.println("Không thể xóa nhân viên: " + employeeId);
            }
            dialog.dispose(); // Đóng hộp thoại
        });

        // Sự kiện nút "Không"
        btnNo.addActionListener(e -> {
            dialog.dispose(); // Đóng hộp thoại
        });

        dialog.setVisible(true);
    }
}
